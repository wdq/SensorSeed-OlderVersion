#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SensorDataRetrievalService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sensorseed")]
	public partial class SensorDataLinqToSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTemperatureData(TemperatureData instance);
    partial void UpdateTemperatureData(TemperatureData instance);
    partial void DeleteTemperatureData(TemperatureData instance);
    partial void InsertHumidityData(HumidityData instance);
    partial void UpdateHumidityData(HumidityData instance);
    partial void DeleteHumidityData(HumidityData instance);
    partial void InsertSensor(Sensor instance);
    partial void UpdateSensor(Sensor instance);
    partial void DeleteSensor(Sensor instance);
    #endregion
		
		public SensorDataLinqToSQLDataContext() : 
				base(global::SensorDataRetrievalService.Properties.Settings.Default.sensorseedConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataLinqToSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataLinqToSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataLinqToSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SensorDataLinqToSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TemperatureData> TemperatureDatas
		{
			get
			{
				return this.GetTable<TemperatureData>();
			}
		}
		
		public System.Data.Linq.Table<HumidityData> HumidityDatas
		{
			get
			{
				return this.GetTable<HumidityData>();
			}
		}
		
		public System.Data.Linq.Table<Sensor> Sensors
		{
			get
			{
				return this.GetTable<Sensor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TemperatureData")]
	public partial class TemperatureData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private decimal _Value;
		
		private System.Guid _SensorId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnSensorIdChanging(System.Guid value);
    partial void OnSensorIdChanged();
    #endregion
		
		public TemperatureData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(8,4) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HumidityData")]
	public partial class HumidityData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.DateTime _Timestamp;
		
		private decimal _Value;
		
		private System.Guid _SensorId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnSensorIdChanging(System.Guid value);
    partial void OnSensorIdChanged();
    #endregion
		
		public HumidityData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(8,4) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SensorId
		{
			get
			{
				return this._SensorId;
			}
			set
			{
				if ((this._SensorId != value))
				{
					this.OnSensorIdChanging(value);
					this.SendPropertyChanging();
					this._SensorId = value;
					this.SendPropertyChanged("SensorId");
					this.OnSensorIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensors")]
	public partial class Sensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Type;
		
		private string _Name;
		
		private System.Nullable<int> _PollingInterval;
		
		private string _WebHost;
		
		private System.Nullable<int> _WebPort;
		
		private string _WebPath;
		
		private bool _Active;
		
		private bool _ToRemove;
		
		private bool _Changed;
		
		private bool _ActiveChanged;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPollingIntervalChanging(System.Nullable<int> value);
    partial void OnPollingIntervalChanged();
    partial void OnWebHostChanging(string value);
    partial void OnWebHostChanged();
    partial void OnWebPortChanging(System.Nullable<int> value);
    partial void OnWebPortChanged();
    partial void OnWebPathChanging(string value);
    partial void OnWebPathChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnToRemoveChanging(bool value);
    partial void OnToRemoveChanged();
    partial void OnChangedChanging(bool value);
    partial void OnChangedChanged();
    partial void OnActiveChangedChanging(bool value);
    partial void OnActiveChangedChanged();
    #endregion
		
		public Sensor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PollingInterval", DbType="Int")]
		public System.Nullable<int> PollingInterval
		{
			get
			{
				return this._PollingInterval;
			}
			set
			{
				if ((this._PollingInterval != value))
				{
					this.OnPollingIntervalChanging(value);
					this.SendPropertyChanging();
					this._PollingInterval = value;
					this.SendPropertyChanged("PollingInterval");
					this.OnPollingIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebHost", DbType="NVarChar(MAX)")]
		public string WebHost
		{
			get
			{
				return this._WebHost;
			}
			set
			{
				if ((this._WebHost != value))
				{
					this.OnWebHostChanging(value);
					this.SendPropertyChanging();
					this._WebHost = value;
					this.SendPropertyChanged("WebHost");
					this.OnWebHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebPort", DbType="Int")]
		public System.Nullable<int> WebPort
		{
			get
			{
				return this._WebPort;
			}
			set
			{
				if ((this._WebPort != value))
				{
					this.OnWebPortChanging(value);
					this.SendPropertyChanging();
					this._WebPort = value;
					this.SendPropertyChanged("WebPort");
					this.OnWebPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebPath", DbType="NVarChar(MAX)")]
		public string WebPath
		{
			get
			{
				return this._WebPath;
			}
			set
			{
				if ((this._WebPath != value))
				{
					this.OnWebPathChanging(value);
					this.SendPropertyChanging();
					this._WebPath = value;
					this.SendPropertyChanged("WebPath");
					this.OnWebPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToRemove", DbType="Bit NOT NULL")]
		public bool ToRemove
		{
			get
			{
				return this._ToRemove;
			}
			set
			{
				if ((this._ToRemove != value))
				{
					this.OnToRemoveChanging(value);
					this.SendPropertyChanging();
					this._ToRemove = value;
					this.SendPropertyChanged("ToRemove");
					this.OnToRemoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Changed", DbType="Bit NOT NULL")]
		public bool Changed
		{
			get
			{
				return this._Changed;
			}
			set
			{
				if ((this._Changed != value))
				{
					this.OnChangedChanging(value);
					this.SendPropertyChanging();
					this._Changed = value;
					this.SendPropertyChanged("Changed");
					this.OnChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveChanged", DbType="Bit NOT NULL")]
		public bool ActiveChanged
		{
			get
			{
				return this._ActiveChanged;
			}
			set
			{
				if ((this._ActiveChanged != value))
				{
					this.OnActiveChangedChanging(value);
					this.SendPropertyChanging();
					this._ActiveChanged = value;
					this.SendPropertyChanged("ActiveChanged");
					this.OnActiveChangedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
